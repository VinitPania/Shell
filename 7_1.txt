Test Operation:
Bash has a test command various bracket and parenthesis operation n if/else construct 

7.1 Test Construct 

An if/ele statement checks whether a the exit status of the script is 0 or not (since 0 means the script is executed success)
and if so it execute one or more command 

There is a dedicated special character called "["left bracket it is a synonym for the test  and a builtin for efficiency reason 
Its command consider its arguments as a comparisons expression or file test or return an exit as a status code corresponding too  the  result of the comparisons(0 for true and 1 for false)

With newer version of bash ie 2.02 it introduced the extended version of the test command [[ ]] which performs comparisons in a similar pattern in which human programers do.
Note that [[ ]] --> is a keyword not a command.
Bash sees [[ $a -lt $b  ]]  as a single element which returns a exit command /status 

# The Exit status of arithmetic operation is not an error value 

NOTE ------>  When if and then are on same line in a condition test, a semicolon must terminate the if statement. Both the if and then are keyword
keyword/command  begin statement before a new statement on the same line begin the old must be terminate 
 if [ -x "$filename" ]; then 


Else if and elif 

elif ---->  is a contraction for else if .The effect is to nest an inner if/else construct within an outer one

The if test condition-true construct is the exact equivalent of its if  [condition-true].As it happen the left bracket 
[  is token which invokes the test command the closing ] right bracket is an if/test should not therefore be strictly necessary however the newer version of the Bash requires it.
 
The [[ ]] construct is the more versatile Bash version of [ ]. 

No filename expansion or word splitting takes place between [[ and ]], but there is a parameter expansion and command substitution.


Using [[ this ]] rather than [ this ] can prevent many logical errors in scripts
